{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Harrison Enyeart's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Harrison Enyeart</li> <li>Reviewer: John Shanahan</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following installed:</p> <ul> <li>Git</li> <li>Docker</li> <li>VS Code (with the Dev Containers Extension)</li> </ul> <p>Tip</p> <p>No software (e.g., Rust) needs to be installed directly on your host machine. All development will happen inside the container.</p>"},{"location":"tutorials/rust-setup/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"tutorials/rust-setup/#1-create-a-new-directory","title":"1. Create a New Directory","text":"<p>Start by opening your terminal and creating a new directory by running the command below in a location of your choice. <pre><code>mkdir rust-dev-container\ncd rust-dev-container\n</code></pre></p> <p>Next, initialize a new Git repository: <pre><code>git init\n</code></pre></p> <p>Now create a <code>README.md</code> file: <pre><code>echo \"# Rust Dev Container Project\" &gt; README.md\n</code></pre></p>"},{"location":"tutorials/rust-setup/#2-set-up-the-dev-container","title":"2. Set Up the Dev Container","text":"<p>Inside your project directory, create a <code>.devcontainer</code> folder: <pre><code>mkdir .devcontainer\n</code></pre></p> <p>Create a <code>devcontainer.json</code> file inside <code>.devcontainer</code>: <pre><code>touch .devcontainer/devcontainer.json\n</code></pre></p> <p>Open the project in Visual Studio Code: <pre><code>code .\n</code></pre></p> <p>Now that we are inside VS Code, open the <code>devcontainer.json</code> file from the <code>.devcontainer</code> folder and add the following content: <pre><code>{\n    \"name\": \"Rust Dev Container\",\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:bullseye\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"rust-lang.rust-analyzer\"\n            ]\n        }\n    }\n}\n</code></pre></p> <p>Tip</p> <ul> <li>This configuration uses the Rust base image provided by Microsoft.</li> <li>The rust-analyzer extension adds helpful features like autocompletion and error highlighting.</li> </ul> <p>Save the file and reopen the project in the Dev Container:</p> <ul> <li>When prompted, click Reopen in Container in VS Code.</li> </ul>"},{"location":"tutorials/rust-setup/#3-verify-rust-installation","title":"3. Verify Rust Installation","text":"<p>Inside the Dev Container terminal, make sure Rust is installed and up to date by running: <pre><code>rustc --version\n</code></pre> You should see an output like: <pre><code>rustc 1.84.0 (e4e7dcdcd 2025-01-09)\n</code></pre></p> <p>Tip</p> <p>If the version is outdated, rebuild the container to ensure the latest image is used.</p>"},{"location":"tutorials/rust-setup/#4-create-a-rust-project","title":"4. Create a Rust Project","text":"<p>Use Cargo to create a new Rust binary project, I'll call mine <code>hello-comp423:</code> <pre><code>cargo new hello-comp423 --vcs none\n</code></pre></p> <p>Tip</p> <p>The --vcs none flag prevents Cargo from initializing another Git repository.</p> <p>Navigate into the project folder: <pre><code>cd hello-comp423\n</code></pre></p>"},{"location":"tutorials/rust-setup/#5-write-your-program","title":"5. Write Your Program","text":"<p>Open <code>src/main.rs</code> in VS Code and replace the default content with the following code: <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre></p> <p>Tip</p> <p>The println! macro is used in Rust to print text to the console.</p>"},{"location":"tutorials/rust-setup/#6-compile-and-run-the-program","title":"6. Compile and Run the Program","text":"<p>Compile the program: <pre><code>cargo build\n</code></pre></p> <p>Run the program: <pre><code>cargo run\n</code></pre></p> <p>You should see the following output:</p> <pre><code>Hello COMP423\n</code></pre>"},{"location":"tutorials/rust-setup/#conclusion","title":"Conclusion","text":"<p>It's that easy. You just successfully set up a Rust development environment in a Dev Container, created a project, and ran your first program.</p>"}]}